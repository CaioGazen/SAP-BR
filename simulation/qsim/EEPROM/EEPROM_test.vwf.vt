// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/12/2025 23:36:01"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          EEPROM_53x18_FULL
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module EEPROM_53x18_FULL_vlg_vec_tst();
// constants                                           
// general purpose registers
reg IN_0;
reg IN_1;
reg IN_2;
reg IN_3;
reg IN_4;
reg IN_5;
reg IN_6;
// wires                                               
wire ACC_IN;
wire ACC_OUT;
wire AL_0;
wire AL_1;
wire ALU_OUT;
wire BR_IN;
wire HLT;
wire IR_IN;
wire IR_OUT;
wire JMP;
wire MAR_IN;
wire NOT;
wire OPR_IN;
wire PC_INC;
wire PC_OUT;
wire RAM_IN;
wire RAM_OUT;
wire SUB;

// assign statements (if any)                          
EEPROM_53x18_FULL i1 (
// port map - connection between master ports and signals/registers   
	.ACC_IN(ACC_IN),
	.ACC_OUT(ACC_OUT),
	.AL_0(AL_0),
	.AL_1(AL_1),
	.ALU_OUT(ALU_OUT),
	.BR_IN(BR_IN),
	.HLT(HLT),
	.IN_0(IN_0),
	.IN_1(IN_1),
	.IN_2(IN_2),
	.IN_3(IN_3),
	.IN_4(IN_4),
	.IN_5(IN_5),
	.IN_6(IN_6),
	.IR_IN(IR_IN),
	.IR_OUT(IR_OUT),
	.JMP(JMP),
	.MAR_IN(MAR_IN),
	.\NOT (NOT),
	.OPR_IN(OPR_IN),
	.PC_INC(PC_INC),
	.PC_OUT(PC_OUT),
	.RAM_IN(RAM_IN),
	.RAM_OUT(RAM_OUT),
	.SUB(SUB)
);
initial 
begin 
#1000000 $stop;
end 

// IN_6
initial
begin
	IN_6 = 1'b0;
end 

// IN_5
initial
begin
	IN_5 = 1'b0;
	IN_5 = #90000 1'b1;
	IN_5 = #150000 1'b0;
end 

// IN_4
initial
begin
	IN_4 = 1'b0;
	IN_4 = #90000 1'b1;
	IN_4 = #150000 1'b0;
end 

// IN_3
initial
begin
	IN_3 = 1'b0;
end 

// IN_2
initial
begin
	IN_2 = 1'b0;
end 

// IN_1
initial
begin
	IN_1 = 1'b0;
	IN_1 = #90000 1'b1;
	IN_1 = #150000 1'b0;
end 

// IN_0
initial
begin
	IN_0 = 1'b0;
	IN_0 = #180000 1'b1;
	IN_0 = #60000 1'b0;
end 
endmodule

