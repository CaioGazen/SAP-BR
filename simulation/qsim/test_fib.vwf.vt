// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/20/2025 15:25:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          SAP_BR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SAP_BR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg BTN_RST;
reg CLOCK;
reg HLT;
reg MAR_ADDR_PROG_0;
reg MAR_ADDR_PROG_1;
reg MAR_ADDR_PROG_2;
reg MAR_ADDR_PROG_3;
reg PROG;
reg RAM_PROG_0;
reg RAM_PROG_1;
reg RAM_PROG_2;
reg RAM_PROG_3;
reg RAM_PROG_4;
reg RAM_PROG_5;
reg RAM_PROG_6;
reg RAM_PROG_7;
reg WR_PROG;
// wires                                               
wire A_OUT_0;
wire A_OUT_1;
wire A_OUT_2;
wire A_OUT_3;
wire A_OUT_4;
wire A_OUT_5;
wire A_OUT_6;
wire A_OUT_7;
wire ACC_IN;
wire ACC_OUT;
wire AL_0;
wire AL_1;
wire ALU_OUT;
wire B_OUT_0;
wire B_OUT_1;
wire B_OUT_2;
wire B_OUT_3;
wire B_OUT_4;
wire B_OUT_5;
wire B_OUT_6;
wire B_OUT_7;
wire BR_IN;
wire IR_IN;
wire IR_OUT;
wire JMP;
wire MAR_ADDR_0;
wire MAR_ADDR_1;
wire MAR_ADDR_2;
wire MAR_ADDR_3;
wire MAR_IN;
wire NOT;
wire OPR_IN;
wire OR_OUT_0;
wire OR_OUT_1;
wire OR_OUT_2;
wire OR_OUT_3;
wire OR_OUT_4;
wire OR_OUT_5;
wire OR_OUT_6;
wire OR_OUT_7;
wire PC_INC;
wire PC_OUT;
wire RAM_IN;
wire RAM_OUT;
wire SUB;

// assign statements (if any)                          
SAP_BR i1 (
// port map - connection between master ports and signals/registers   
	.A_OUT_0(A_OUT_0),
	.A_OUT_1(A_OUT_1),
	.A_OUT_2(A_OUT_2),
	.A_OUT_3(A_OUT_3),
	.A_OUT_4(A_OUT_4),
	.A_OUT_5(A_OUT_5),
	.A_OUT_6(A_OUT_6),
	.A_OUT_7(A_OUT_7),
	.ACC_IN(ACC_IN),
	.ACC_OUT(ACC_OUT),
	.AL_0(AL_0),
	.AL_1(AL_1),
	.ALU_OUT(ALU_OUT),
	.B_OUT_0(B_OUT_0),
	.B_OUT_1(B_OUT_1),
	.B_OUT_2(B_OUT_2),
	.B_OUT_3(B_OUT_3),
	.B_OUT_4(B_OUT_4),
	.B_OUT_5(B_OUT_5),
	.B_OUT_6(B_OUT_6),
	.B_OUT_7(B_OUT_7),
	.BR_IN(BR_IN),
	.BTN_RST(BTN_RST),
	.CLOCK(CLOCK),
	.HLT(HLT),
	.IR_IN(IR_IN),
	.IR_OUT(IR_OUT),
	.JMP(JMP),
	.MAR_ADDR_0(MAR_ADDR_0),
	.MAR_ADDR_1(MAR_ADDR_1),
	.MAR_ADDR_2(MAR_ADDR_2),
	.MAR_ADDR_3(MAR_ADDR_3),
	.MAR_ADDR_PROG_0(MAR_ADDR_PROG_0),
	.MAR_ADDR_PROG_1(MAR_ADDR_PROG_1),
	.MAR_ADDR_PROG_2(MAR_ADDR_PROG_2),
	.MAR_ADDR_PROG_3(MAR_ADDR_PROG_3),
	.MAR_IN(MAR_IN),
	.\NOT (NOT),
	.OPR_IN(OPR_IN),
	.OR_OUT_0(OR_OUT_0),
	.OR_OUT_1(OR_OUT_1),
	.OR_OUT_2(OR_OUT_2),
	.OR_OUT_3(OR_OUT_3),
	.OR_OUT_4(OR_OUT_4),
	.OR_OUT_5(OR_OUT_5),
	.OR_OUT_6(OR_OUT_6),
	.OR_OUT_7(OR_OUT_7),
	.PC_INC(PC_INC),
	.PC_OUT(PC_OUT),
	.PROG(PROG),
	.RAM_IN(RAM_IN),
	.RAM_OUT(RAM_OUT),
	.RAM_PROG_0(RAM_PROG_0),
	.RAM_PROG_1(RAM_PROG_1),
	.RAM_PROG_2(RAM_PROG_2),
	.RAM_PROG_3(RAM_PROG_3),
	.RAM_PROG_4(RAM_PROG_4),
	.RAM_PROG_5(RAM_PROG_5),
	.RAM_PROG_6(RAM_PROG_6),
	.RAM_PROG_7(RAM_PROG_7),
	.SUB(SUB),
	.WR_PROG(WR_PROG)
);
initial 
begin 
#50000000 $finish;
end 

// BTN_RST
initial
begin
	BTN_RST = 1'b0;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #25000 1'b1;
	#25000;
end 

// HLT
initial
begin
	HLT = 1'b0;
end 

// PROG
initial
begin
	PROG = 1'b1;
	PROG = #360000 1'b0;
end 

// WR_PROG
initial
begin
	WR_PROG = 1'b0;
	WR_PROG = #10000 1'b1;
	WR_PROG = #10000 1'b0;
	WR_PROG = #20000 1'b1;
	WR_PROG = #10000 1'b0;
	WR_PROG = #20000 1'b1;
	WR_PROG = #10000 1'b0;
	WR_PROG = #20000 1'b1;
	WR_PROG = #10000 1'b0;
	WR_PROG = #20000 1'b1;
	WR_PROG = #10000 1'b0;
	WR_PROG = #20000 1'b1;
	WR_PROG = #10000 1'b0;
	WR_PROG = #20000 1'b1;
	WR_PROG = #10000 1'b0;
	WR_PROG = #20000 1'b1;
	WR_PROG = #10000 1'b0;
	WR_PROG = #20000 1'b1;
	WR_PROG = #10000 1'b0;
	WR_PROG = #20000 1'b1;
	WR_PROG = #10000 1'b0;
	WR_PROG = #20000 1'b1;
	WR_PROG = #10000 1'b0;
	WR_PROG = #20000 1'b1;
	WR_PROG = #10000 1'b0;
end 

// MAR_ADDR_PROG_3
initial
begin
	MAR_ADDR_PROG_3 = 1'b1;
	MAR_ADDR_PROG_3 = #60000 1'b0;
	MAR_ADDR_PROG_3 = #240000 1'b1;
	MAR_ADDR_PROG_3 = #60000 1'b0;
end 

// MAR_ADDR_PROG_2
initial
begin
	MAR_ADDR_PROG_2 = 1'b1;
	MAR_ADDR_PROG_2 = #60000 1'b0;
	MAR_ADDR_PROG_2 = #120000 1'b1;
	MAR_ADDR_PROG_2 = #120000 1'b0;
	MAR_ADDR_PROG_2 = #30000 1'b1;
	MAR_ADDR_PROG_2 = #30000 1'b0;
end 

// MAR_ADDR_PROG_1
initial
begin
	MAR_ADDR_PROG_1 = 1'b0;
	MAR_ADDR_PROG_1 = #30000 1'b1;
	MAR_ADDR_PROG_1 = #30000 1'b0;
	MAR_ADDR_PROG_1 = #60000 1'b1;
	MAR_ADDR_PROG_1 = #60000 1'b0;
	MAR_ADDR_PROG_1 = #60000 1'b1;
	MAR_ADDR_PROG_1 = #60000 1'b0;
	MAR_ADDR_PROG_1 = #30000 1'b1;
	MAR_ADDR_PROG_1 = #30000 1'b0;
end 

// MAR_ADDR_PROG_0
initial
begin
	MAR_ADDR_PROG_0 = 1'b1;
	MAR_ADDR_PROG_0 = #30000 1'b0;
	MAR_ADDR_PROG_0 = #60000 1'b1;
	MAR_ADDR_PROG_0 = #30000 1'b0;
	MAR_ADDR_PROG_0 = #30000 1'b1;
	MAR_ADDR_PROG_0 = #30000 1'b0;
	MAR_ADDR_PROG_0 = #30000 1'b1;
	MAR_ADDR_PROG_0 = #30000 1'b0;
	MAR_ADDR_PROG_0 = #30000 1'b1;
	MAR_ADDR_PROG_0 = #30000 1'b0;
	MAR_ADDR_PROG_0 = #30000 1'b1;
	MAR_ADDR_PROG_0 = #30000 1'b0;
end 

// RAM_PROG_7
initial
begin
	RAM_PROG_7 = 1'b0;
	RAM_PROG_7 = #120000 1'b1;
	RAM_PROG_7 = #30000 1'b0;
	RAM_PROG_7 = #150000 1'b1;
	RAM_PROG_7 = #30000 1'b0;
end 

// RAM_PROG_6
initial
begin
	RAM_PROG_6 = 1'b0;
	RAM_PROG_6 = #90000 1'b1;
	RAM_PROG_6 = #60000 1'b0;
	RAM_PROG_6 = #180000 1'b1;
	RAM_PROG_6 = #30000 1'b0;
end 

// RAM_PROG_5
initial
begin
	RAM_PROG_5 = 1'b0;
	RAM_PROG_5 = #120000 1'b1;
	RAM_PROG_5 = #60000 1'b0;
	RAM_PROG_5 = #30000 1'b1;
	RAM_PROG_5 = #30000 1'b0;
	RAM_PROG_5 = #30000 1'b1;
	RAM_PROG_5 = #60000 1'b0;
end 

// RAM_PROG_4
initial
begin
	RAM_PROG_4 = 1'b0;
	RAM_PROG_4 = #60000 1'b1;
	RAM_PROG_4 = #30000 1'b0;
	RAM_PROG_4 = #60000 1'b1;
	RAM_PROG_4 = #150000 1'b0;
	RAM_PROG_4 = #30000 1'b1;
	RAM_PROG_4 = #30000 1'b0;
end 

// RAM_PROG_3
initial
begin
	RAM_PROG_3 = 1'b0;
	RAM_PROG_3 = #60000 1'b1;
	RAM_PROG_3 = #60000 1'b0;
	RAM_PROG_3 = #30000 1'b1;
	RAM_PROG_3 = #150000 1'b0;
end 

// RAM_PROG_2
initial
begin
	RAM_PROG_2 = 1'b0;
	RAM_PROG_2 = #60000 1'b1;
	RAM_PROG_2 = #60000 1'b0;
	RAM_PROG_2 = #30000 1'b1;
	RAM_PROG_2 = #150000 1'b0;
	RAM_PROG_2 = #30000 1'b1;
	RAM_PROG_2 = #30000 1'b0;
end 

// RAM_PROG_1
initial
begin
	RAM_PROG_1 = 1'b0;
	RAM_PROG_1 = #90000 1'b1;
	RAM_PROG_1 = #30000 1'b0;
	RAM_PROG_1 = #30000 1'b1;
	RAM_PROG_1 = #60000 1'b0;
	RAM_PROG_1 = #30000 1'b1;
	RAM_PROG_1 = #60000 1'b0;
end 

// RAM_PROG_0
initial
begin
	RAM_PROG_0 = 1'b0;
	RAM_PROG_0 = #30000 1'b1;
	RAM_PROG_0 = #60000 1'b0;
	RAM_PROG_0 = #60000 1'b1;
	RAM_PROG_0 = #30000 1'b0;
	RAM_PROG_0 = #30000 1'b1;
	RAM_PROG_0 = #60000 1'b0;
	RAM_PROG_0 = #60000 1'b1;
	RAM_PROG_0 = #30000 1'b0;
end 
endmodule

