// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/11/2025 10:21:39"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CI_74LS157
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CI_74LS157_vlg_vec_tst();
// constants                                           
// general purpose registers
reg E;
reg I0a;
reg I0b;
reg I0c;
reg I0d;
reg I1a;
reg I1b;
reg I1c;
reg I1d;
reg S;
// wires                                               
wire Za;
wire Zb;
wire Zc;
wire Zd;

// assign statements (if any)                          
CI_74LS157 i1 (
// port map - connection between master ports and signals/registers   
	.E(E),
	.I0a(I0a),
	.I0b(I0b),
	.I0c(I0c),
	.I0d(I0d),
	.I1a(I1a),
	.I1b(I1b),
	.I1c(I1c),
	.I1d(I1d),
	.S(S),
	.Za(Za),
	.Zb(Zb),
	.Zc(Zc),
	.Zd(Zd)
);
initial 
begin 
#1000000 $finish;
end 

// E
initial
begin
	repeat(2)
	begin
		E = 1'b0;
		E = #200000 1'b1;
		# 200000;
	end
	E = 1'b0;
end 

// S
always
begin
	S = 1'b0;
	S = #100000 1'b1;
	#100000;
end 

// I1d
always
begin
	I1d = 1'b0;
	I1d = #50000 1'b1;
	#50000;
end 

// I1c
always
begin
	I1c = 1'b0;
	I1c = #50000 1'b1;
	#50000;
end 

// I1b
always
begin
	I1b = 1'b0;
	I1b = #50000 1'b1;
	#50000;
end 

// I1a
always
begin
	I1a = 1'b0;
	I1a = #50000 1'b1;
	#50000;
end 

// I0d
always
begin
	I0d = 1'b0;
	I0d = #25000 1'b1;
	#25000;
end 

// I0c
always
begin
	I0c = 1'b0;
	I0c = #25000 1'b1;
	#25000;
end 

// I0b
always
begin
	I0b = 1'b0;
	I0b = #25000 1'b1;
	#25000;
end 

// I0a
always
begin
	I0a = 1'b0;
	I0a = #25000 1'b1;
	#25000;
end 
endmodule

