// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/13/2025 23:15:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CTRL
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CTRL_vlg_vec_tst();
// constants                                           
// general purpose registers
reg BTN_RESET;
reg CLOCK;
// wires                                               
wire _RESET;
wire pin_name1;
wire pin_name2;
wire pin_name3;
wire RESET;
wire T0;
wire T1;
wire T2;
wire T3;
wire T4;

// assign statements (if any)                          
CTRL i1 (
// port map - connection between master ports and signals/registers   
	._RESET(_RESET),
	.BTN_RESET(BTN_RESET),
	.CLOCK(CLOCK),
	.pin_name1(pin_name1),
	.pin_name2(pin_name2),
	.pin_name3(pin_name3),
	.RESET(RESET),
	.T0(T0),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4)
);
initial 
begin 
#1000000 $finish;
end 

// BTN_RESET
initial
begin
	BTN_RESET = 1'b0;
	BTN_RESET = #190000 1'b1;
	BTN_RESET = #20000 1'b0;
end 

// CLOCK
initial
begin
	repeat(33)
	begin
		CLOCK = 1'b0;
		CLOCK = #15000 1'b1;
		# 15000;
	end
	CLOCK = 1'b0;
end 
endmodule

