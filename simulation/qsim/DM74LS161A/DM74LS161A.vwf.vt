// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/10/2025 21:24:29"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          PC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg _PC_OUT;
reg _RESET;
reg CLOCK;
reg JMP;
reg PC_IN_0;
reg PC_IN_1;
reg PC_IN_2;
reg PC_IN_3;
reg PC_INC;
// wires                                               
wire PC_OUT_0;
wire PC_OUT_1;
wire PC_OUT_2;
wire PC_OUT_3;

// assign statements (if any)                          
PC i1 (
// port map - connection between master ports and signals/registers   
	._PC_OUT(_PC_OUT),
	._RESET(_RESET),
	.CLOCK(CLOCK),
	.JMP(JMP),
	.PC_IN_0(PC_IN_0),
	.PC_IN_1(PC_IN_1),
	.PC_IN_2(PC_IN_2),
	.PC_IN_3(PC_IN_3),
	.PC_INC(PC_INC),
	.PC_OUT_0(PC_OUT_0),
	.PC_OUT_1(PC_OUT_1),
	.PC_OUT_2(PC_OUT_2),
	.PC_OUT_3(PC_OUT_3)
);
initial 
begin 
#1000000 $stop;
end 

// CLOCK
initial
begin
	repeat(18)
	begin
		CLOCK = 1'b0;
		CLOCK = #10000 1'b1;
		# 10000;
	end
	CLOCK = 1'b0;
	CLOCK = #50000 1'b1;
	CLOCK = #50000 1'b0;
	CLOCK = #10000 1'b1;
	# 10000;
	repeat(26)
	begin
		CLOCK = 1'b0;
		CLOCK = #10000 1'b1;
		# 10000;
	end
end 
endmodule

