// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/14/2025 23:31:32"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RAM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RAM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg _RAM_PROG;
reg A;
reg B;
reg C;
reg CLOCK;
reg CS;
reg D;
reg IN_0;
reg IN_1;
reg IN_2;
reg IN_3;
reg IN_4;
reg IN_5;
reg IN_6;
reg IN_7;
reg RAM_IN;
reg RAM_PROG_DATA_0;
reg RAM_PROG_DATA_1;
reg RAM_PROG_DATA_2;
reg RAM_PROG_DATA_3;
reg RAM_PROG_DATA_4;
reg RAM_PROG_DATA_5;
reg RAM_PROG_DATA_6;
reg RAM_PROG_DATA_7;
reg WR_PROG;
// wires                                               
wire O_0;
wire O_1;
wire O_2;
wire O_3;
wire O_4;
wire O_5;
wire O_6;
wire O_7;

// assign statements (if any)                          
RAM i1 (
// port map - connection between master ports and signals/registers   
	._RAM_PROG(_RAM_PROG),
	.A(A),
	.B(B),
	.C(C),
	.CLOCK(CLOCK),
	.CS(CS),
	.D(D),
	.IN_0(IN_0),
	.IN_1(IN_1),
	.IN_2(IN_2),
	.IN_3(IN_3),
	.IN_4(IN_4),
	.IN_5(IN_5),
	.IN_6(IN_6),
	.IN_7(IN_7),
	.O_0(O_0),
	.O_1(O_1),
	.O_2(O_2),
	.O_3(O_3),
	.O_4(O_4),
	.O_5(O_5),
	.O_6(O_6),
	.O_7(O_7),
	.RAM_IN(RAM_IN),
	.RAM_PROG_DATA_0(RAM_PROG_DATA_0),
	.RAM_PROG_DATA_1(RAM_PROG_DATA_1),
	.RAM_PROG_DATA_2(RAM_PROG_DATA_2),
	.RAM_PROG_DATA_3(RAM_PROG_DATA_3),
	.RAM_PROG_DATA_4(RAM_PROG_DATA_4),
	.RAM_PROG_DATA_5(RAM_PROG_DATA_5),
	.RAM_PROG_DATA_6(RAM_PROG_DATA_6),
	.RAM_PROG_DATA_7(RAM_PROG_DATA_7),
	.WR_PROG(WR_PROG)
);
initial 
begin 
#1000000 $stop;
end 

// RAM_IN
initial
begin
	RAM_IN = 1'b0;
end 

// CLOCK
initial
begin
	CLOCK = 1'b0;
end 

// CS
initial
begin
	CS = 1'b0;
	CS = #370000 1'b1;
	CS = #600000 1'b0;
end 

// A
initial
begin
	A = 1'b0;
	A = #240000 1'b1;
	A = #240000 1'b0;
	A = #240000 1'b1;
	A = #240000 1'b0;
end 

// B
initial
begin
	B = 1'b0;
	B = #120000 1'b1;
	# 120000;
	repeat(3)
	begin
		B = 1'b0;
		B = #120000 1'b1;
		# 120000;
	end
	B = 1'b0;
end 

// C
initial
begin
	C = 1'b0;
	C = #60000 1'b1;
	# 60000;
	repeat(7)
	begin
		C = 1'b0;
		C = #60000 1'b1;
		# 60000;
	end
	C = 1'b0;
end 

// D
initial
begin
	D = 1'b0;
	D = #30000 1'b1;
	D = #30000 1'b0;
	D = #30000 1'b1;
	# 30000;
	repeat(14)
	begin
		D = 1'b0;
		D = #30000 1'b1;
		# 30000;
	end
	D = 1'b0;
	D = #30000 1'b1;
end 

// IN_0
initial
begin
	IN_0 = 1'b0;
end 

// IN_1
initial
begin
	IN_1 = 1'b0;
end 

// IN_2
initial
begin
	IN_2 = 1'b0;
end 

// IN_3
initial
begin
	IN_3 = 1'b0;
end 

// IN_4
initial
begin
	IN_4 = 1'b0;
end 

// IN_5
initial
begin
	IN_5 = 1'b0;
end 

// IN_6
initial
begin
	IN_6 = 1'b0;
end 

// IN_7
initial
begin
	IN_7 = 1'b0;
end 

// _RAM_PROG
initial
begin
	_RAM_PROG = 1'b0;
	_RAM_PROG = #240000 1'b1;
end 

// WR_PROG
initial
begin
	WR_PROG = 1'b0;
	WR_PROG = #100000 1'b1;
	WR_PROG = #10000 1'b0;
	WR_PROG = #100000 1'b1;
	WR_PROG = #10000 1'b0;
end 

// RAM_PROG_DATA_0
initial
begin
	RAM_PROG_DATA_0 = 1'b0;
	RAM_PROG_DATA_0 = #90000 1'b1;
	RAM_PROG_DATA_0 = #30000 1'b0;
end 

// RAM_PROG_DATA_1
initial
begin
	RAM_PROG_DATA_1 = 1'b0;
	RAM_PROG_DATA_1 = #90000 1'b1;
	RAM_PROG_DATA_1 = #30000 1'b0;
	RAM_PROG_DATA_1 = #80000 1'b1;
	RAM_PROG_DATA_1 = #30000 1'b0;
end 

// RAM_PROG_DATA_2
initial
begin
	RAM_PROG_DATA_2 = 1'b0;
	RAM_PROG_DATA_2 = #90000 1'b1;
	RAM_PROG_DATA_2 = #30000 1'b0;
	RAM_PROG_DATA_2 = #80000 1'b1;
	RAM_PROG_DATA_2 = #30000 1'b0;
end 

// RAM_PROG_DATA_3
initial
begin
	RAM_PROG_DATA_3 = 1'b0;
	RAM_PROG_DATA_3 = #90000 1'b1;
	RAM_PROG_DATA_3 = #30000 1'b0;
	RAM_PROG_DATA_3 = #80000 1'b1;
	RAM_PROG_DATA_3 = #30000 1'b0;
end 

// RAM_PROG_DATA_4
initial
begin
	RAM_PROG_DATA_4 = 1'b0;
	RAM_PROG_DATA_4 = #200000 1'b1;
	RAM_PROG_DATA_4 = #30000 1'b0;
end 

// RAM_PROG_DATA_5
initial
begin
	RAM_PROG_DATA_5 = 1'b0;
	RAM_PROG_DATA_5 = #200000 1'b1;
	RAM_PROG_DATA_5 = #30000 1'b0;
end 

// RAM_PROG_DATA_6
initial
begin
	RAM_PROG_DATA_6 = 1'b0;
end 

// RAM_PROG_DATA_7
initial
begin
	RAM_PROG_DATA_7 = 1'b0;
end 
endmodule

