// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/10/2025 15:48:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Cell_8x8_bits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Cell_8x8_bits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CS_0;
reg CS_1;
reg CS_2;
reg CS_3;
reg CS_4;
reg CS_5;
reg CS_6;
reg CS_7;
reg IN_0;
reg IN_1;
reg IN_2;
reg IN_3;
reg IN_4;
reg IN_5;
reg IN_6;
reg IN_7;
reg WE;
// wires                                               
wire OUT_0;
wire OUT_1;
wire OUT_2;
wire OUT_3;
wire OUT_4;
wire OUT_5;
wire OUT_6;
wire OUT_7;

// assign statements (if any)                          
Cell_8x8_bits i1 (
// port map - connection between master ports and signals/registers   
	.CS_0(CS_0),
	.CS_1(CS_1),
	.CS_2(CS_2),
	.CS_3(CS_3),
	.CS_4(CS_4),
	.CS_5(CS_5),
	.CS_6(CS_6),
	.CS_7(CS_7),
	.IN_0(IN_0),
	.IN_1(IN_1),
	.IN_2(IN_2),
	.IN_3(IN_3),
	.IN_4(IN_4),
	.IN_5(IN_5),
	.IN_6(IN_6),
	.IN_7(IN_7),
	.OUT_0(OUT_0),
	.OUT_1(OUT_1),
	.OUT_2(OUT_2),
	.OUT_3(OUT_3),
	.OUT_4(OUT_4),
	.OUT_5(OUT_5),
	.OUT_6(OUT_6),
	.OUT_7(OUT_7),
	.WE(WE)
);
initial 
begin 
#1000000 $stop;
end 

// WE
initial
begin
	WE = 1'b0;
	WE = #20000 1'b1;
	WE = #10000 1'b0;
	WE = #90000 1'b1;
	WE = #10000 1'b0;
end 

// CS_0
initial
begin
	CS_0 = 1'b0;
end 

// CS_1
initial
begin
	CS_1 = 1'b1;
	CS_1 = #40000 1'b0;
	CS_1 = #290000 1'b1;
	CS_1 = #70000 1'b0;
end 

// CS_2
initial
begin
	CS_2 = 1'b0;
end 

// CS_3
initial
begin
	CS_3 = 1'b0;
end 

// CS_4
initial
begin
	CS_4 = 1'b0;
end 

// CS_5
initial
begin
	CS_5 = 1'b0;
	CS_5 = #110000 1'b1;
	CS_5 = #30000 1'b0;
	CS_5 = #380000 1'b1;
	CS_5 = #50000 1'b0;
end 

// CS_6
initial
begin
	CS_6 = 1'b0;
end 

// CS_7
initial
begin
	CS_7 = 1'b0;
end 

// IN_0
initial
begin
	IN_0 = 1'b1;
	IN_0 = #250000 1'b0;
	IN_0 = #100000 1'b1;
	IN_0 = #100000 1'b0;
	IN_0 = #100000 1'b1;
	IN_0 = #50000 1'b0;
	IN_0 = #50000 1'b1;
	IN_0 = #50000 1'b0;
	IN_0 = #50000 1'b1;
	IN_0 = #200000 1'b0;
end 

// IN_1
initial
begin
	IN_1 = 1'b0;
	IN_1 = #100000 1'b1;
	IN_1 = #50000 1'b0;
	IN_1 = #250000 1'b1;
	IN_1 = #50000 1'b0;
	IN_1 = #150000 1'b1;
	IN_1 = #100000 1'b0;
	IN_1 = #200000 1'b1;
	IN_1 = #50000 1'b0;
end 

// IN_2
initial
begin
	IN_2 = 1'b0;
	IN_2 = #100000 1'b1;
	IN_2 = #50000 1'b0;
	IN_2 = #50000 1'b1;
	IN_2 = #250000 1'b0;
	IN_2 = #100000 1'b1;
	IN_2 = #50000 1'b0;
	IN_2 = #50000 1'b1;
	IN_2 = #50000 1'b0;
	IN_2 = #100000 1'b1;
	IN_2 = #50000 1'b0;
end 

// IN_3
initial
begin
	IN_3 = 1'b1;
	IN_3 = #50000 1'b0;
	IN_3 = #50000 1'b1;
	IN_3 = #50000 1'b0;
	IN_3 = #50000 1'b1;
	IN_3 = #100000 1'b0;
	IN_3 = #150000 1'b1;
	IN_3 = #50000 1'b0;
	IN_3 = #50000 1'b1;
	IN_3 = #50000 1'b0;
	IN_3 = #150000 1'b1;
	IN_3 = #50000 1'b0;
	IN_3 = #50000 1'b1;
	IN_3 = #50000 1'b0;
end 

// IN_4
initial
begin
	IN_4 = 1'b0;
	IN_4 = #50000 1'b1;
	IN_4 = #150000 1'b0;
	IN_4 = #50000 1'b1;
	IN_4 = #50000 1'b0;
	IN_4 = #50000 1'b1;
	IN_4 = #50000 1'b0;
	IN_4 = #50000 1'b1;
	IN_4 = #50000 1'b0;
	IN_4 = #200000 1'b1;
	IN_4 = #50000 1'b0;
	IN_4 = #150000 1'b1;
	IN_4 = #50000 1'b0;
end 

// IN_5
initial
begin
	IN_5 = 1'b0;
	IN_5 = #50000 1'b1;
	IN_5 = #150000 1'b0;
	IN_5 = #50000 1'b1;
	IN_5 = #50000 1'b0;
	IN_5 = #100000 1'b1;
	IN_5 = #50000 1'b0;
	IN_5 = #50000 1'b1;
	IN_5 = #50000 1'b0;
	IN_5 = #50000 1'b1;
	IN_5 = #50000 1'b0;
	IN_5 = #50000 1'b1;
	IN_5 = #100000 1'b0;
	IN_5 = #50000 1'b1;
	IN_5 = #100000 1'b0;
end 

// IN_6
initial
begin
	IN_6 = 1'b1;
	IN_6 = #50000 1'b0;
	IN_6 = #50000 1'b1;
	IN_6 = #50000 1'b0;
	IN_6 = #50000 1'b1;
	IN_6 = #200000 1'b0;
	IN_6 = #100000 1'b1;
	IN_6 = #50000 1'b0;
	IN_6 = #50000 1'b1;
	IN_6 = #50000 1'b0;
	IN_6 = #100000 1'b1;
end 

// IN_7
initial
begin
	IN_7 = 1'b1;
	IN_7 = #50000 1'b0;
	IN_7 = #200000 1'b1;
	IN_7 = #50000 1'b0;
	IN_7 = #50000 1'b1;
	IN_7 = #100000 1'b0;
	IN_7 = #150000 1'b1;
	IN_7 = #50000 1'b0;
	IN_7 = #50000 1'b1;
end 
endmodule

