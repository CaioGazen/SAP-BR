// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/10/2025 23:48:04"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ACC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ACC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg _ACC_IN;
reg _ACC_OUT;
reg ACC_IN_0;
reg ACC_IN_1;
reg ACC_IN_2;
reg ACC_IN_3;
reg ACC_IN_4;
reg ACC_IN_5;
reg ACC_IN_6;
reg ACC_IN_7;
reg CLOCK;
reg RESET;
// wires                                               
wire ACC_OUT_0;
wire ACC_OUT_1;
wire ACC_OUT_2;
wire ACC_OUT_3;
wire ACC_OUT_4;
wire ACC_OUT_5;
wire ACC_OUT_6;
wire ACC_OUT_7;
wire ACC_OUT_ULA_0;
wire ACC_OUT_ULA_1;
wire ACC_OUT_ULA_2;
wire ACC_OUT_ULA_3;
wire ACC_OUT_ULA_4;
wire ACC_OUT_ULA_5;
wire ACC_OUT_ULA_6;
wire ACC_OUT_ULA_7;

// assign statements (if any)                          
ACC i1 (
// port map - connection between master ports and signals/registers   
	._ACC_IN(_ACC_IN),
	._ACC_OUT(_ACC_OUT),
	.ACC_IN_0(ACC_IN_0),
	.ACC_IN_1(ACC_IN_1),
	.ACC_IN_2(ACC_IN_2),
	.ACC_IN_3(ACC_IN_3),
	.ACC_IN_4(ACC_IN_4),
	.ACC_IN_5(ACC_IN_5),
	.ACC_IN_6(ACC_IN_6),
	.ACC_IN_7(ACC_IN_7),
	.ACC_OUT_0(ACC_OUT_0),
	.ACC_OUT_1(ACC_OUT_1),
	.ACC_OUT_2(ACC_OUT_2),
	.ACC_OUT_3(ACC_OUT_3),
	.ACC_OUT_4(ACC_OUT_4),
	.ACC_OUT_5(ACC_OUT_5),
	.ACC_OUT_6(ACC_OUT_6),
	.ACC_OUT_7(ACC_OUT_7),
	.ACC_OUT_ULA_0(ACC_OUT_ULA_0),
	.ACC_OUT_ULA_1(ACC_OUT_ULA_1),
	.ACC_OUT_ULA_2(ACC_OUT_ULA_2),
	.ACC_OUT_ULA_3(ACC_OUT_ULA_3),
	.ACC_OUT_ULA_4(ACC_OUT_ULA_4),
	.ACC_OUT_ULA_5(ACC_OUT_ULA_5),
	.ACC_OUT_ULA_6(ACC_OUT_ULA_6),
	.ACC_OUT_ULA_7(ACC_OUT_ULA_7),
	.CLOCK(CLOCK),
	.RESET(RESET)
);
initial 
begin 
#1000000 $stop;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #25000 1'b1;
	#25000;
end 

// RESET
initial
begin
	RESET = 1'b0;
end 

// _ACC_IN
initial
begin
	_ACC_IN = 1'b1;
	_ACC_IN = #40000 1'b0;
	_ACC_IN = #60000 1'b1;
end 

// _ACC_OUT
initial
begin
	_ACC_OUT = 1'b1;
	_ACC_OUT = #260000 1'b0;
	_ACC_OUT = #50000 1'b1;
end 

// ACC_IN_0
initial
begin
	ACC_IN_0 = 1'b0;
	ACC_IN_0 = #70000 1'b1;
	ACC_IN_0 = #40000 1'b0;
end 

// ACC_IN_1
initial
begin
	ACC_IN_1 = 1'b0;
end 

// ACC_IN_2
initial
begin
	ACC_IN_2 = 1'b0;
	ACC_IN_2 = #70000 1'b1;
	ACC_IN_2 = #40000 1'b0;
end 

// ACC_IN_3
initial
begin
	ACC_IN_3 = 1'b0;
end 

// ACC_IN_4
initial
begin
	ACC_IN_4 = 1'b0;
end 

// ACC_IN_5
initial
begin
	ACC_IN_5 = 1'b0;
end 

// ACC_IN_6
initial
begin
	ACC_IN_6 = 1'b0;
	ACC_IN_6 = #70000 1'b1;
	ACC_IN_6 = #40000 1'b0;
end 

// ACC_IN_7
initial
begin
	ACC_IN_7 = 1'b0;
	ACC_IN_7 = #70000 1'b1;
	ACC_IN_7 = #40000 1'b0;
end 
endmodule

