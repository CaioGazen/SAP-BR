// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/12/2025 22:39:13"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DEMUX_4bits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DEMUX_4bits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg IN_0;
reg IN_1;
reg IN_2;
reg IN_3;
// wires                                               
wire OUT_0;
wire OUT_1;
wire OUT_2;
wire OUT_3;
wire OUT_4;
wire OUT_5;
wire OUT_6;
wire OUT_7;
wire OUT_8;
wire OUT_9;
wire OUT_10;
wire OUT_11;
wire OUT_12;
wire OUT_13;
wire OUT_14;
wire OUT_15;

// assign statements (if any)                          
DEMUX_4bits i1 (
// port map - connection between master ports and signals/registers   
	.IN_0(IN_0),
	.IN_1(IN_1),
	.IN_2(IN_2),
	.IN_3(IN_3),
	.OUT_0(OUT_0),
	.OUT_1(OUT_1),
	.OUT_2(OUT_2),
	.OUT_3(OUT_3),
	.OUT_4(OUT_4),
	.OUT_5(OUT_5),
	.OUT_6(OUT_6),
	.OUT_7(OUT_7),
	.OUT_8(OUT_8),
	.OUT_9(OUT_9),
	.OUT_10(OUT_10),
	.OUT_11(OUT_11),
	.OUT_12(OUT_12),
	.OUT_13(OUT_13),
	.OUT_14(OUT_14),
	.OUT_15(OUT_15)
);
initial 
begin 
#1000000 $stop;
end 

// IN_3
initial
begin
	IN_3 = 1'b0;
	IN_3 = #400000 1'b1;
	IN_3 = #400000 1'b0;
end 

// IN_2
initial
begin
	repeat(2)
	begin
		IN_2 = 1'b0;
		IN_2 = #200000 1'b1;
		# 200000;
	end
	IN_2 = 1'b0;
end 

// IN_1
always
begin
	IN_1 = 1'b0;
	IN_1 = #100000 1'b1;
	#100000;
end 

// IN_0
always
begin
	IN_0 = 1'b0;
	IN_0 = #50000 1'b1;
	#50000;
end 
endmodule

