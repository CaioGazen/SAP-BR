// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/10/2025 18:59:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DM74LS161A
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DM74LS161A_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLEAR;
reg CLOCK;
reg DATA_A;
reg DATA_B;
reg DATA_C;
reg DATA_D;
reg ENABLE_P;
reg ENABLE_T;
reg LOAD;
// wires                                               
wire QA;
wire QB;
wire QC;
wire QD;

// assign statements (if any)                          
DM74LS161A i1 (
// port map - connection between master ports and signals/registers   
	.CLEAR(CLEAR),
	.CLOCK(CLOCK),
	.DATA_A(DATA_A),
	.DATA_B(DATA_B),
	.DATA_C(DATA_C),
	.DATA_D(DATA_D),
	.ENABLE_P(ENABLE_P),
	.ENABLE_T(ENABLE_T),
	.LOAD(LOAD),
	.QA(QA),
	.QB(QB),
	.QC(QC),
	.QD(QD)
);
initial 
begin 
#1000000 $finish;
end 

// CLEAR
initial
begin
	CLEAR = 1'b0;
end 

// CLOCK
initial
begin
	CLOCK = 1'b0;
	CLOCK = #400000 1'b1;
	CLOCK = #200000 1'b0;
end 

// DATA_A
initial
begin
	DATA_A = 1'b0;
	DATA_A = #400000 1'b1;
	DATA_A = #200000 1'b0;
end 

// DATA_B
initial
begin
	DATA_B = 1'b0;
	DATA_B = #400000 1'b1;
	DATA_B = #200000 1'b0;
end 

// DATA_C
initial
begin
	DATA_C = 1'b0;
	DATA_C = #400000 1'b1;
	DATA_C = #200000 1'b0;
end 

// DATA_D
initial
begin
	DATA_D = 1'b0;
	DATA_D = #400000 1'b1;
	DATA_D = #200000 1'b0;
end 

// ENABLE_P
initial
begin
	ENABLE_P = 1'b0;
end 

// ENABLE_T
initial
begin
	ENABLE_T = 1'b0;
end 

// LOAD
initial
begin
	LOAD = 1'b0;
end 
endmodule

